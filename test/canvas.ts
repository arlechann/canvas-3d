import type { Runner } from './lib/runner';
import { Assert } from './lib/assert';
import { ArrayUtils } from '../src/lib/arrayUtils';
import { bresenham } from '../src/canvas';

const plotEqual = (a: [number, number], b: [number, number]) => a[0] === b[0] && a[1] === b[1];
const plotsEqual = (a: [number, number][], b: [number, number][]) => ArrayUtils.arrayEqualBy(a, b, plotEqual);

export const canvasTest = (runner: Runner) => {
	runner.testCases.bresenham = () => {
		Assert.equalBy(
			bresenham(0, 0, 3, 2),
			[[0, 0], [1, 1], [2, 1], [3, 2]] as [number, number][],
			plotsEqual
		)
		Assert.equalBy(
			bresenham(0, 0, 2, 3),
			[[0, 0], [1, 1], [1, 2], [2, 3]] as [number, number][],
			plotsEqual
		)
		Assert.equalBy(
			bresenham(3, 2, 0, 0),
			[[3, 2], [2, 1], [1, 1], [0, 0]] as [number, number][],
			plotsEqual
		)
		Assert.equalBy(
			bresenham(2, 3, 0, 0),
			[[2, 3], [1, 2], [1, 1], [0, 0]] as [number, number][],
			plotsEqual
		)
		Assert.equalBy(
			bresenham(500, 169.34370351236234, 500, 354.1196100146197),
			[
				[500, 169],
				[500, 170],
				[500, 171],
				[500, 172],
				[500, 173],
				[500, 174],
				[500, 175],
				[500, 176],
				[500, 177],
				[500, 178],
				[500, 179],
				[500, 180],
				[500, 181],
				[500, 182],
				[500, 183],
				[500, 184],
				[500, 185],
				[500, 186],
				[500, 187],
				[500, 188],
				[500, 189],
				[500, 190],
				[500, 191],
				[500, 192],
				[500, 193],
				[500, 194],
				[500, 195],
				[500, 196],
				[500, 197],
				[500, 198],
				[500, 199],
				[500, 200],
				[500, 201],
				[500, 202],
				[500, 203],
				[500, 204],
				[500, 205],
				[500, 206],
				[500, 207],
				[500, 208],
				[500, 209],
				[500, 210],
				[500, 211],
				[500, 212],
				[500, 213],
				[500, 214],
				[500, 215],
				[500, 216],
				[500, 217],
				[500, 218],
				[500, 219],
				[500, 220],
				[500, 221],
				[500, 222],
				[500, 223],
				[500, 224],
				[500, 225],
				[500, 226],
				[500, 227],
				[500, 228],
				[500, 229],
				[500, 230],
				[500, 231],
				[500, 232],
				[500, 233],
				[500, 234],
				[500, 235],
				[500, 236],
				[500, 237],
				[500, 238],
				[500, 239],
				[500, 240],
				[500, 241],
				[500, 242],
				[500, 243],
				[500, 244],
				[500, 245],
				[500, 246],
				[500, 247],
				[500, 248],
				[500, 249],
				[500, 250],
				[500, 251],
				[500, 252],
				[500, 253],
				[500, 254],
				[500, 255],
				[500, 256],
				[500, 257],
				[500, 258],
				[500, 259],
				[500, 260],
				[500, 261],
				[500, 262],
				[500, 263],
				[500, 264],
				[500, 265],
				[500, 266],
				[500, 267],
				[500, 268],
				[500, 269],
				[500, 270],
				[500, 271],
				[500, 272],
				[500, 273],
				[500, 274],
				[500, 275],
				[500, 276],
				[500, 277],
				[500, 278],
				[500, 279],
				[500, 280],
				[500, 281],
				[500, 282],
				[500, 283],
				[500, 284],
				[500, 285],
				[500, 286],
				[500, 287],
				[500, 288],
				[500, 289],
				[500, 290],
				[500, 291],
				[500, 292],
				[500, 293],
				[500, 294],
				[500, 295],
				[500, 296],
				[500, 297],
				[500, 298],
				[500, 299],
				[500, 300],
				[500, 301],
				[500, 302],
				[500, 303],
				[500, 304],
				[500, 305],
				[500, 306],
				[500, 307],
				[500, 308],
				[500, 309],
				[500, 310],
				[500, 311],
				[500, 312],
				[500, 313],
				[500, 314],
				[500, 315],
				[500, 316],
				[500, 317],
				[500, 318],
				[500, 319],
				[500, 320],
				[500, 321],
				[500, 322],
				[500, 323],
				[500, 324],
				[500, 325],
				[500, 326],
				[500, 327],
				[500, 328],
				[500, 329],
				[500, 330],
				[500, 331],
				[500, 332],
				[500, 333],
				[500, 334],
				[500, 335],
				[500, 336],
				[500, 337],
				[500, 338],
				[500, 339],
				[500, 340],
				[500, 341],
				[500, 342],
				[500, 343],
				[500, 344],
				[500, 345],
				[500, 346],
				[500, 347],
				[500, 348],
				[500, 349],
				[500, 350],
				[500, 351],
				[500, 352],
				[500, 353],
				[500, 354]
			] as [number, number][],
			plotsEqual
		)
	}
};